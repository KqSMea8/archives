#!/usr/bin/env node
const fs = require('fs')
const path = require('path')
const { spawnSync } = require('child_process')

const publicNpmPackages = [
  'runtime',
  'supervisor',
  'installer',
  'sdk',
  'plugins/homekit',
  'plugins/hdc1000',
  'plugins/aqm0802a'
]

function run(argv, env, cwd = process.cwd()) {
  console.log('==> ', argv.join(' '), `(in ${cwd})`)

  const cp = spawnSync(argv[0], argv.slice(1), {
    stdio: 'inherit',
    cwd,
    env: Object.assign({}, env, process.env)
  })

  if (cp.error) {
    throw new Error(`error: failed to run ${argv[0]}: ${cp.error}`)
  }

  if (cp.status !== 0) {
    throw new Error(`error: \`${argv[0]}' exited with ${cp.status}.`)
  }
}

function updatePackageJsons(version) {
  for (const filepath of publicNpmPackages.map(d => path.join(d, 'package.json'))) {
    const packageJson = JSON.parse(fs.readFileSync(filepath))
    packageJson.version = version.replace(/^v/, '')

    fs.writeFileSync(filepath, JSON.stringify(packageJson, null, 2) + '\n')
  }
}

function updatePackageJsonDependencies(pkgDir, version) {
  const filepath = path.join(pkgDir, 'package.json')
  const ver = `^${version.replace(/^v/, '')}`
  const packageJson = JSON.parse(fs.readFileSync(filepath))

  for (const name of Object.keys(packageJson.dependencies || {})) {
    if (name === 'makestack' || name.startsWith('@makestack/')) {
      packageJson.dependencies[name] = ver
    }
  }

  for (const name of Object.keys(packageJson.devDependencies || {})) {
    if (name === 'makestack' || name.startsWith('@makestack/')) {
      packageJson.devDependencies[name] = ver
    }
  }

  fs.writeFileSync(filepath, JSON.stringify(packageJson, null, 2) + '\n')
}

function buildNpmPackages(distDir, version) {
  for (const relpath of publicNpmPackages) {
    const pkgDir = path.resolve(__dirname, '..', relpath)
    run(['yarn'], {}, pkgDir)
    updatePackageJsonDependencies(pkgDir, version)
    run(['yarn', 'pack'], {}, pkgDir)

    for (const filepath of fs.readdirSync(pkgDir)) {
      if (filepath.match(/makestack.+.tgz/) && filepath.includes(version)) {
        fs.copyFileSync(path.join(pkgDir, filepath), path.join(distDir, filepath))
      }
    }
  }
}

function buildInstaller(distDir, version) {
  run(['yarn', 'build:macos'], {}, path.resolve(__dirname, '../installer'))
  run(['yarn', 'build:linux'], {}, path.resolve(__dirname, '../installer'))

  run(['zip', '-r', path.join(distDir, `makestack-installer-${version}-macos.zip`),
    'makestack-installer.app'], {},
    path.resolve(__dirname, '../installer/app/makestack-installer-darwin-x64'))

  run(['tar', 'Jcf', path.join(distDir, `makestack-installer-${version}-linux-x64.tar.xz`),
    'makestack-installer-linux-x64'], {},
    path.resolve(__dirname, '../installer/app'))
}

function buildLinux(distDir, version) {
  run(['docker', 'build', '-t', 'makestack/linux-builder', '.'],
    {}, path.resolve(__dirname, '../linux'))

  run(['docker', 'run',
    '-e', 'TARGET=raspberrypi3',
    '-e', 'BUILD=release',
    '-e', `VERSION=v${version}`,
    '-v', `${path.resolve(__dirname, '..')}:/makestack`,
    '-it', 'makestack/linux-builder'],
  {}, path.resolve(__dirname, '../linux'))
}

function main() {
  const distDir = path.resolve(__dirname, '../dist')
  const version = process.argv[2]
  if (!version || !version.match(/v[0-9]+\.[0-9]+\.[0-9]+/)) {
    throw new Error(`Usage: ./tools/release version`)
  }

  if (fs.existsSync(distDir)) {
    run(['rm', '-rf', distDir])
  }
  fs.mkdirSync(distDir)

  updatePackageJsons(version)
  buildNpmPackages(distDir, version)
  buildInstaller(distDir, version)

  // buildLinux(distDir, version)
  console.log('!!! Building Linux in a Docker container is currently broken.')

  console.log(`Hooray! You have built MakeStack in ${path.resolve(__dirname, '../dist')}!`)
}

main()
