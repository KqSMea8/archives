//
//  8042 Keyboard Controller
//
use resea::arch::x64::{IoPort, Irq};
use resea::Channel;

// Refere docs/drivers/kbd_device.md
pub type KeyCode = u16;

pub enum KeyEvent {
    KeyDown(KeyCode),
    KeyUp(KeyCode),
}

const KEYBOARD_IO_BASE: u16 = 0x60;
const KEYBOARD_IO_INPUT: u16 = 0;
const KEYBOARD_IRQ: u32 = 1;

pub struct Keyboard {
    ioport: IoPort,
    irq: Irq,
}

const KEYCODE_TABLE: [KeyCode; 256] = [
/* 0 */   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 16 */  0x0051, 0x0057, 0x0045, 0x0052, 0x0054, 0x0059, 0x0055, 0x0049, 0x004f, 0x0050, 0x005b, 0x005d, 0x8008, 0x8000, 0x0041, 0x0053,
/* 32 */  0x0044, 0x0046, 0x0047, 0x0048, 0x004a, 0x004b, 0x004c, 0x003b, 0x0027, 0x0060, 0x8004, 0x005c, 0x005a, 0x0058, 0x0043, 0x0056,
/* 48 */  0x0042, 0x004e, 0x004d, 0x002c, 0x002e, 0x002f, 0x8005, 0x0000, 0x0000, 0x801d, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 64 */  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 80 */  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 96 */  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 112 */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 128 */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 144 */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 160 */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 176 */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 192 */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 208 */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 224 */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
/* 240 */ 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
];

fn scancode_to_keycode(scancode: u8) -> KeyCode {
    KEYCODE_TABLE[scancode as usize]
}

impl Keyboard {
    pub fn new() -> Keyboard {
        let ioport = IoPort::new(KEYBOARD_IO_BASE, 5);
        let irq = Irq::new(KEYBOARD_IRQ);

        Keyboard {
            ioport: ioport,
            irq: irq,
        }
    }

    pub fn listen_for_irq(&self, server: &Channel) {
        self.irq.listen(server);
    }

    pub fn get_keycode(&self) -> KeyEvent {
        let scancode = unsafe { self.ioport.in8(KEYBOARD_IO_INPUT) };
        let keycode = scancode_to_keycode(scancode);
        if scancode < 0x80 {
            KeyEvent::KeyDown(keycode)
        } else {
            KeyEvent::KeyUp(keycode)
        }
    }
}
