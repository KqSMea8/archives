#!/usr/bin/env python3
import sys
import argparse
import os
import jinja2

TEMPLATE = """
#include <resea.h>
#include <resea/memory.h>
#undef PACKAGE_NAME
#define PACKAGE_NAME "start_apps"
#define DEFAULT_THREAD_SIZE 0x4000

/* FIXME */
#define THREAD_RUNNABLE 1
void *kernel_allocate_memory(size_t size, uint32_t flags);

result_t kernel_create_thread(ident_t group, const uchar_t *name, size_t name_size,
                          ident_t *r_thread, ident_t *r_group);
result_t kernel_set_thread(ident_t thread, uintptr_t entry, uintptr_t arg,
                       uintptr_t stack, size_t stack_size);
result_t kernel_set_thread_status(ident_t thread, int status);
void kernel_start_threading(void);
{% for app in apps %}
{% if test %}
void {{ app }}_test();
{% else %}
void {{ app }}_startup();
{% endif %}
{% endfor %}

static void app_entrypoint (void (*startup)()) {
  startup();
  BUG("startup() returned");
  for(;;); // FIXME
}

void start_apps(void){

{% if with_threading %}
    ident_t thread, group;
{% endif %}

{% for app in apps %}
{% if with_threading %}
    INFO("starting '{{ app }}'");
    kernel_create_thread(1, (const uchar_t *) "{{ app }}",
                       {{ app | length }}, &thread, &group);
{% if test %}
    kernel_set_thread(thread,
                    (uintptr_t) app_entrypoint, (uintptr_t) {{ app }}_test,
                    (uintptr_t) kernel_allocate_memory(DEFAULT_THREAD_SIZE, MEMORY_ALLOC_NORMAL),
                    DEFAULT_THREAD_SIZE);
{% else %}
    kernel_set_thread(thread,
                    (uintptr_t) app_entrypoint, (uintptr_t) {{ app }}_startup,
                    (uintptr_t) kernel_allocate_memory(DEFAULT_THREAD_SIZE, MEMORY_ALLOC_NORMAL),
                    DEFAULT_THREAD_SIZE);
    kernel_set_thread_status(thread, THREAD_RUNNABLE);
{% endif %}

{% else %}
    INFO("starting {{ app }} (direct-startup)");
    {{ app }}_startup();
{% endif %}
{% endfor %}

{% if with_threading %}
    INFO("starting threading");
    kernel_start_threading();
{% endif %}
}
"""

def main():
    print(jinja2.Template(TEMPLATE).render(
        apps=sys.argv[1:],
        test=os.environ.get('TEST'),
        with_threading=os.environ.get('WITH_THREADING')))

if __name__ == "__main__":
   main()
