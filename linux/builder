#!/usr/bin/env zsh
set -ue

if [ $1 = "--test" ]; then
  CMD="build && test"
  TARGET=$2
else
  CMD="build"
  TARGET=$1
fi

BUSYBOX_VERSION=1.27.2
NODE_VERSION=6.11.4
GLIBC_VERSION=2.24-11+deb9u1
LIBGCC_VERSION=6.3.0-18
LIBSTDCPP_VERSION=6.3.0-18
APPARMOR_VERSION=2.10.95-0ubuntu2
TARGET_DIR=$PWD/targets/$TARGET
CONFIG_DIR=$PWD/config
DISK_DIR=$PWD/disk
INITRAMFS_DIR=$PWD/initramfs
BUILD_DIR=$PWD/build/$TARGET
DOWNLOADS_DIR=$PWD/build/downloads

source $TARGET_DIR/target.sh

INITRAMFS_CPIO_PATH=$BUILD_DIR/initramfs.cpio
NODE_DIR=$BUILD_DIR/node-v${NODE_VERSION}-linux-${NODE_ARCH}
BUSYBOX_DIR=$BUILD_DIR/busybox-$BUSYBOX_VERSION
UBUNTU_DIR=$BUILD_DIR/ubuntu
KERNEL_IMG=$BUILD_DIR/kernel.img

export MAKEFLAGS="-j $(getconf _NPROCESSORS_ONLN)"

progress() {
    printf "\033[1;34m==> %s\033[m\n" "$*"
}


download() {
    if [ ! -f "$(basename $1)" ];then
        progress "Downloading $(basename $1)"
        curl -LO $1
    fi
}


download_files() {
    progress "Downloading files"
    pushd $DOWNLOADS_DIR

    for url in $DOWNLOAD_URLS; do
        download $url
    done

    popd
}

extract() {
    pushd $(dirname $2)
    [ -d $2 ] || tar xf $1
    popd
}


extract_files() {
    progress "Extracting files"

    pushd $BUILD_DIR
    [ -d node-v${NODE_VERSION}-linux-${NODE_ARCH} ] || tar xf $DOWNLOADS_DIR/node-v${NODE_VERSION}-linux-${NODE_ARCH}.tar.xz
    popd

    pushd $UBUNTU_DIR

    if [ ! -d lib ]; then
        for deb in \
            $DOWNLOADS_DIR/libgcc1_${LIBGCC_VERSION}_${DEB_ARCH}.deb \
            $DOWNLOADS_DIR/libstdc++6_${LIBSTDCPP_VERSION}_${DEB_ARCH}.deb \
            $DOWNLOADS_DIR/libc6_${GLIBC_VERSION}_${DEB_ARCH}.deb \
            $DOWNLOADS_DIR/apparmor_${APPARMOR_VERSION}_${DEB_ARCH}.deb
        do
            ar x $deb
            tar xf data.tar.xz
        done
    fi

    popd
}


build_busybox() {
    progress "Building Busybox"
    extract $DOWNLOADS_DIR/busybox-$BUSYBOX_VERSION.tar.bz2 $BUSYBOX_DIR

    pushd $BUSYBOX_DIR
    [ -f .config ] || cp $CONFIG_DIR/busybox.config .config
    make busybox
    popd
}


build_linux() {
    progress "Building Linux"
    extract $LINUX_TARBALL $LINUX_DIR

    pushd $LINUX_DIR
    if [ ! -f .config ]; then
        cp $TARGET_DIR/linux.config .config
        sed -i "s#__INITRAMFS_CPIO_PATH__#$INITRAMFS_CPIO_PATH#" .config 
    fi

    make $LINUX_MAKE_TARGET
    popd
}


build_initramfs() {
    pushd initramfs

    for file in $LIB_FILES; do
        cp $UBUNTU_DIR/lib/${TRIPLET}/$file lib/$file
    done

    cp $BUSYBOX_DIR/busybox bin/busybox
    cp $NODE_DIR/bin/node   bin/node
    cp $UBUNTU_DIR/lib/${TRIPLET}/ld-2.24.so $INITRAMFS_DIR/$DYLINKER_PATH
    cp $UBUNTU_DIR/usr/lib/${TRIPLET}/libstdc++.so.6 lib/libstdc++.so.6
    cp $UBUNTU_DIR/sbin/apparmor_parser bin/apparmor_parser

    pushd app
    yarn
    popd

    [ -e dev/console ] || sudo mknod dev/console c 5 1

    find . | cpio -ov --format=newc > $INITRAMFS_CPIO_PATH
    popd
}


build() {
    mkdir -p $UBUNTU_DIR $DOWNLOADS_DIR
    download_files
    extract_files
    build_busybox
    build_initramfs
    build_linux
    
    cp $VMLINUZ $KERNEL_IMG
    progress "Successfully built MakeStack Linux!"
    du -h $KERNEL_IMG
    sha256sum $KERNEL_IMG
}

test() {
    zsh -c "(sleep 32 ; echo \"\\x1xq\") | $QEMU" | tee test.log
    if ! fgrep "*** success" test.log > /dev/null; then
      echo
      echo "userland test failed :("
      exit 1
    fi
}

eval $CMD
