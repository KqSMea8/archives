[
  {
    "name": "@makestack/runtime",
    "body": "// Generated by dts-bundle v0.7.3\n\ndeclare module '@makestack/runtime' {\n    import { AppAPI } from \"@makestack/runtime/dist/api/app\";\n    import { DeviceAPI } from \"@makestack/runtime/dist/api/device\";\n    import { publish } from \"@makestack/runtime/dist/api/event\";\n    import { eprintln, println } from \"@makestack/runtime/dist/api/logging\";\n    import { SerialAPI } from \"@makestack/runtime/dist/api/serial\";\n    import { ConfigAPI } from \"@makestack/runtime/dist/api/config\";\n    import { SubProcessAPI } from \"@makestack/runtime/dist/api/subprocess\";\n    import { TimerAPI } from \"@makestack/runtime/dist/api/timer\";\n    import { GPIOConstructor, I2CConstructor, SPIConstructor } from \"@makestack/runtime/dist/types\";\n    import { logger } from \"@makestack/runtime/dist/logger\";\n    export { println, eprintln, publish, logger };\n    export const GPIO: GPIOConstructor;\n    export const I2C: I2CConstructor;\n    export const SPI: SPIConstructor;\n    export const Timer: TimerAPI;\n    export const Config: ConfigAPI;\n    export const App: AppAPI;\n    export const Device: DeviceAPI;\n    export const SubProcess: SubProcessAPI;\n    export const Serial: typeof SerialAPI;\n}\n\ndeclare module '@makestack/runtime/dist/api/app' {\n    export class AppAPI {\n        enableUpdate(): void;\n        disableUpdate(): void;\n        onExit(callback: () => void): void;\n    }\n}\n\ndeclare module '@makestack/runtime/dist/api/device' {\n    export class DeviceAPI {\n        getDeviceType(): string;\n    }\n}\n\ndeclare module '@makestack/runtime/dist/api/event' {\n    export function publish(event: string, data?: string | number): void;\n}\n\ndeclare module '@makestack/runtime/dist/api/logging' {\n    export function println(message: string): void;\n    export function eprintln(message: string): void;\n}\n\ndeclare module '@makestack/runtime/dist/api/serial' {\n    export class SerialAPI {\n        path: string;\n        watching: boolean;\n        fd: number;\n        baudrate: number;\n        constructor(args: {\n            path: string;\n            baudrate: number;\n        });\n        static list(): string[];\n        configure(baudrate: number): void;\n        write(data: Buffer): void;\n        read(): Buffer;\n        onData(callback: (chunk: Buffer) => void): void;\n        onNewLine(callback: (line: string) => void): void;\n    }\n}\n\ndeclare module '@makestack/runtime/dist/api/config' {\n    export type Configs = {\n        [key: string]: string;\n    };\n    export type onChangeCallback = (value: string) => void;\n    export type onCommandCallback = (value: string) => void;\n    export class ConfigAPI {\n        configs: Configs;\n        onChangeCallbacks: {\n            [key: string]: onChangeCallback[];\n        };\n        onCommandCallbacks: {\n            [key: string]: onCommandCallback;\n        };\n        constructor();\n        onCommand(key: string, callback: (value: string) => void): void;\n        onChange(key: string, callback: (value: string) => void): void;\n        update(newConfigs: Configs): Promise<void>;\n    }\n}\n\ndeclare module '@makestack/runtime/dist/api/subprocess' {\n    export class SubProcessAPI {\n        run(argv: string[]): {\n            stdout: Buffer;\n            stderr: Buffer;\n            status: number;\n        };\n    }\n}\n\ndeclare module '@makestack/runtime/dist/api/timer' {\n    export class TimerAPI {\n        interval(interval: number, callback: () => void): void;\n        loop(callback: () => void): Promise<void>;\n        delay(duration: number, callback: () => void): void;\n        sleep(duration: number): Promise<void>;\n        busywait(usec: number): void;\n    }\n}\n\ndeclare module '@makestack/runtime/dist/types' {\n    export type GPIOPinMode = 'in' | 'out';\n    export type GPIOInterruptMode = 'rising' | 'falling' | 'both';\n    export interface GPIOInterface {\n        setMode(mode: GPIOPinMode): void;\n        write(value: boolean): void;\n        read(): boolean;\n        onInterrupt(mode: GPIOInterruptMode, callback: () => void): void;\n    }\n    export interface GPIOConstructor {\n        new (args: {\n            pin: number;\n            mode: GPIOPinMode;\n        }): GPIOInterface;\n    }\n    export type SPIMode = 'MODE0' | 'MDOE1' | 'MODE2';\n    export type SPIOrder = 'LSBFIRST' | 'MSBFIRST';\n    export interface SPIConstructor {\n        new (args: {\n            slave?: number;\n            mode: SPIMode;\n            speed?: number;\n            order?: SPIOrder;\n            bits?: number;\n            ss?: number;\n            path?: string;\n        }): SPIInterface;\n    }\n    export interface SPIInterface {\n        transfer(tx: number[] | Buffer): Buffer;\n    }\n    export interface I2CConstructor {\n        new (args: {\n            address: number;\n        }): I2CInterface;\n    }\n    export interface I2CInterface {\n        read(length: number): Buffer;\n        write(data: number[] | Buffer): void;\n    }\n}\n\ndeclare module '@makestack/runtime/dist/logger' {\n    export const logger: {\n        debug: (...messages: any[]) => void;\n        info: (...messages: any[]) => void;\n        error: (...messages: any[]) => void;\n        warn: (...messages: any[]) => void;\n    };\n}\n\n"
  },
  {
    "name": "@makestack/aqm0802a",
    "body": "// Generated by dts-bundle v0.7.3\n\ndeclare module '@makestack/aqm0802a' {\n    export class AQM0802A {\n        bus: any;\n        constructor(address?: number);\n        clear(): Promise<void>;\n        update(text: string): Promise<void>;\n    }\n}\n\n"
  },
  {
    "name": "@makestack/hdc1000",
    "body": "// Generated by dts-bundle v0.7.3\n\ndeclare module '@makestack/hdc1000' {\n    export class HDC1000 {\n        constructor(address?: number);\n        readTemperature(): number;\n        readHumidity(): number;\n    }\n}\n\n"
  },
  {
    "name": "@makestack/homekit",
    "body": "// Generated by dts-bundle v0.7.3\n\ndeclare module '@makestack/homekit' {\n    import { Accessory } from \"@makestack/homekit/dist/accessory\";\n    export { Accessory };\n}\n\ndeclare module '@makestack/homekit/dist/accessory' {\n    export interface AccessoryArgs {\n        id: string;\n        pin: string;\n        name: string;\n        manufacturer?: string;\n        model?: string;\n        serial?: string;\n        category: string;\n    }\n    export class Accessory {\n        id: string;\n        pin: string;\n        deviceName: string;\n        accessory: any;\n        constructor({id, pin, category, name, manufacturer, model, serial}: AccessoryArgs);\n        start(): void;\n        onIdentify(callback: (paired: boolean) => void): void;\n    }\n}\n\n"
  }
]